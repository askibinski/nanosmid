{"version":3,"sources":["drupal.js","router.js"],"names":["drupalConnector","nid","node","get","url","fetch","then","status","json","showNid","data","catch","console","log","e","response","Promise","resolve","reject","Error","h1","document","createElement","title","createTextNode","attributes","body","value","appendChild","getElementById","innerHTML","api","nanoRouter","routes","root","add","route","routeObj","push","getRoutes","scan","checkCurrent","clearSlashes","location","pathname","navigate","links","querySelectorAll","link","path","getAttribute","addEventListener","click","toString","replace","preventDefault","getNid","history","pushState","router"],"mappings":"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","file":"all.js","sourcesContent":["\n\"use strict\";\n\n/**\n * ES6 Class.\n */\nclass drupalConnector {\n\n\tconstructor() {\n\n\t}\n\n\tgetNid(nid) {\n\t  this.node = this.get('https://service.nanosmid.nl/node/' + nid + '?_format=api_json');\n\t}\n\n\t// https://jakearchibald.com/2015/thats-so-fetch\n\tget(url) {\n\t\tfetch(url)\n\t\t.then(this.status)\n\t\t.then(this.json)\n\t\t.then(data => this.showNid(data))\n\t\t.catch(e => console.log(e));\n\t}\n\n\tstatus(response) {\n\t\tif (response.status >= 200 && response.status < 300) {  \n\t\t\treturn Promise.resolve(response)  \n\t\t} else {  \n\t\t\treturn Promise.reject(new Error('Looks like there was a problem. Status Code: ' +  \n          response.status))  \n\t\t}  \n\t}\n\n\tjson(response) {\n\t\treturn response.json()  \n\t}\n\n\tshowNid(data) {\n\t\tconsole.log('Connected to Drupal!');\n\t\tvar h1 = document.createElement(\"h1\")\n\t\tvar title = document.createTextNode(data.attributes.title);\n\t\tvar body = document.createTextNode(data.attributes.body.value);\n\t\th1.appendChild(title);\n\t\tdocument.getElementById('content').innerHTML = \"\";\n\t\tdocument.getElementById('content').appendChild(h1);\n\t\tdocument.getElementById('content').appendChild(body);\n\t}\n\n}\n\nvar api = new drupalConnector();\n\n","\n\"use strict\";\n\n/**\n * ES6 Class.\n */\nclass nanoRouter {\n\n\n\tconstructor() {\n\t\t// We are using closures here to store \"private\" data.\n\t\t// If we would be using \"this.routes\" then routes could be added through\n\t\t// router.routes.push('bla'); \n\t\t// Now we force the use of the API method \"add\".\n\n\t\tlet routes = [];\n\n\t\tthis.root = '/';\n\t\t\n\t\t// We are assuming here all links are to other Drupal nodes\n\t\t// and we store the nids in our routes array.\n\t\tthis.add = function(route, nid) {\n\t\t\tlet routeObj = {nid: nid, route: route}\n\t\t\troutes.push(routeObj);\n\t\t}\n\t\tthis.getRoutes = function() {\n\t\t\treturn routes;\n\t\t}\n\n\t\tthis.scan();\n\n\t\tthis.checkCurrent();\n\n\t}\n\n\tcheckCurrent() {\n\t\tvar routes = this.getRoutes();\n\t\tfor (let route of routes) {\n\t\t\tif (route.route == this.clearSlashes(location.pathname)) {\n\t\t\t\t//console.log(`match: ${route}`);\n\t\t\t\tthis.navigate(route);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scanning the document for all links which should be internal routes.\n\tscan() {\n\t\tlet links = document.querySelectorAll('[data-nanorouter]');\n\t\tfor (let link of links) {\n\t\t  //console.log(value.getAttribute('href'));\n\t\t  let path = this.clearSlashes(link.getAttribute('href'));\n\t\t  let nid = link.getAttribute('data-nanorouter');\n\t\t  this.add(path, nid);\n\t\t  link.addEventListener('click', (e) => this.click(e, path));\n\t\t}\n\t}\n\n\tclearSlashes(path) {\n        return path.toString().replace(/\\/$/, '').replace(/^\\//, '');\n    }\n\n\t// Event handler for clicking a (scanned) link.\n\tclick(e, path) {\n\t\tvar routes = this.getRoutes();\n\t\tfor (let route of routes) {\n\t\t\tif (route.route == path) {\n\t\t\t\t//console.log(`match: ${route}`);\n\t\t\t\tthis.navigate(route);\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}\n\t}\n\n\tnavigate(route) {\n\t\tif (route.nid) {\n\t\t\tconsole.log(`this is a nid: ${route.nid}`);\n\t\t\tapi.getNid(route.nid);\n\t\t} else {\n\t\t\tconsole.log('I do not recognize this route');\n\t\t\t// @TODO We only support nids for now.\n\t\t}\n\t\thistory.pushState(null, null, this.root + route.route);\n  \t\tconsole.log(route.route);\n\t}\n\n\t// @TODO doesn't work on back-button yet.\n\n}\n\nvar router = new nanoRouter();\n"]}