{"version":3,"sources":["drupal.js","router.js"],"names":["drupalConnector","nid","node","get","url","fetch","then","status","json","showNid","data","catch","console","log","e","response","Promise","resolve","reject","Error","h1","document","createElement","title","createTextNode","attributes","body","value","appendChild","getElementById","innerHTML","drupal","nanoRouter","routes","root","add","route","routeObj","push","getRoutes","scan","loadCurrent","window","addEventListener","check","location","pathname","navigate","path","clearSlashes","i","length","links","querySelectorAll","getAttribute","click","toString","replace","history","pushState","preventDefault","getNid","router"],"mappings":"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","file":"all.js","sourcesContent":["\n\"use strict\";\n\n/**\n * DrupalConnector (ES6) Class.\n */\nclass drupalConnector {\n\n\tconstructor() {\n\n\t}\n\n\tgetNid(nid) {\n\t  this.node = this.get('https://service.nanosmid.nl/node/' + nid + '?_format=api_json');\n\t}\n\n\tget(url) {\n\t\tfetch(url)\n\t\t.then(this.status)\n\t\t.then(this.json)\n\t\t.then(data => this.showNid(data))\n\t\t.catch(e => console.log(e));\n\t}\n\n\tstatus(response) {\n\t\tif (response.status >= 200 && response.status < 300) {  \n\t\t\treturn Promise.resolve(response)  \n\t\t} else {  \n\t\t\treturn Promise.reject(new Error('Looks like there was a problem. Status Code: ' +  \n          response.status))  \n\t\t}  \n\t}\n\n\tjson(response) {\n\t\treturn response.json()  \n\t}\n\n\tshowNid(data) {\n\t\t//console.log('Connected to Drupal!');\n\t\tvar h1 = document.createElement(\"h1\")\n\t\tvar title = document.createTextNode(data.attributes.title);\n\t\tvar body = document.createTextNode(data.attributes.body.value);\n\t\th1.appendChild(title);\n\t\tdocument.getElementById('content').innerHTML = \"\";\n\t\tdocument.getElementById('content').appendChild(h1);\n\t\tdocument.getElementById('content').appendChild(body);\n\t}\n\n}\n\nvar drupal = new drupalConnector();\n\n","\n\"use strict\";\n\n/**\n * NanoRouter (ES6) dlass.\n */\nclass nanoRouter {\n\n\n\tconstructor() {\n\t\t// We are using closures here to store \"private\" data.\n\t\t// If we would be using \"this.routes\" then routes could be added through\n\t\t// router.routes.push('bla'); \n\t\t// Now we force the use of the API method \"add\".\n\n\t\tlet routes = [];\n\n\t\tthis.root = '/';\n\t\t\n\t\t// We are assuming here all links are to other Drupal nodes\n\t\t// and we store the nids in our routes array.\n\t\tthis.add = function(route, nid) {\n\t\t\tlet routeObj = {nid: nid, route: route}\n\t\t\troutes.push(routeObj);\n\t\t}\n\t\tthis.getRoutes = function() {\n\t\t\treturn routes;\n\t\t}\n\n\t\tthis.scan();\n\n\t\tthis.loadCurrent();\n\t\t\n\t\t// Adding popstate event listener to handle browser back button  \n    \twindow.addEventListener(\"popstate\", (e) => this.loadCurrent());\n\n\t}\n\n\tloadCurrent() {\n\t\tlet route = this.check(location.pathname);\n\t\tif (route !== false) {\n\t\t\tthis.navigate(route);\n\t\t}\n\t}\n\n\tcheck(path) {\n\t\tvar path = this.clearSlashes(path);\n\t\tvar routes = this.getRoutes();\n\t\tfor (var i = 0; i < routes.length; i++) {\n\t\t\tif (routes[i].route == path) {\n\t\t\t\treturn routes[i];\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\t// Scanning the document for all links which should be internal routes.\n\tscan() {\n\t\tlet links = document.querySelectorAll('[data-nanorouter]');\n\t\tfor (var i = 0; i < links.length; i++) {\n\t\t  let path = this.clearSlashes(links[i].getAttribute('href'));\n\t\t  let nid = links[i].getAttribute('data-nanorouter');\n\t\t  this.add(path, nid);\n\t\t  links[i].addEventListener('click', (e) => this.click(e, path));\n\t\t}\n\t}\n\n\tclearSlashes(path) {\n        return path.toString().replace(/\\/$/, '').replace(/^\\//, '');\n    }\n\n\t// Event handler for clicking a (scanned) link.\n\tclick(e, path) {\n\t\tvar route = this.check(path);\n\t\tif (route !== false) {\n\t\t\tthis.navigate(route);\n\t\t\thistory.pushState(null, null, this.root + route.route);\n\t\t\te.preventDefault();\t\n\t\t}\n\t}\n\n\tnavigate(route) {\n\t\tif (route.nid) {\n\t\t\tdrupal.getNid(route.nid);\n\t\t} else {\n\t\t\tconsole.log('I do not recognize this route');\n\t\t\t// @TODO We only support nids for now.\n\t\t}\n\t}\n\n}\n\nvar router = new nanoRouter();\n"]}